{
  "createdAt": "2025-06-30T16:49:51.025Z",
  "updatedAt": "2025-06-30T16:49:51.025Z",
  "id": "MOjwcSnoQcHENgkl",
  "name": "\ud83e\udd16 AI Powered RAG Chatbot for Your Docs + Google Drive + Gemini + Qdrant",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "3b3ef01b-9bb4-42ef-93c2-3fba85b8bcf4",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -1140,
        1480
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "062c8d99-e7ca-445f-a247-37bcb3a3c450",
      "name": "Extract from PDF",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        40,
        1440
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "b2253ff7-465e-4ecc-8b3d-78858b3e14d2",
      "name": "Extract from CSV",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        40,
        1640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.concatenated_text }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_id",
                "value": "={{ $('Set File ID').first().json.file_id}}"
              },
              {
                "name": "title",
                "value": "={{ $('Create Metadata Title & Description').item.json.output.title }}"
              },
              {
                "name": "description",
                "value": "={{ $('Create Metadata Title & Description').item.json.output.description }}"
              }
            ]
          }
        }
      },
      "id": "31152450-741f-4824-bf5d-52d3748b7b5f",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        2120,
        1640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "mode": "url",
          "value": "https://drive.google.com/drive/u/0/folders/1B-Wl-ktVFbTmX685DB978jNvs9Ihnxiv"
        },
        "event": "fileCreated",
        "options": {}
      },
      "id": "aee28b2e-b3df-4c54-8607-07b3d3e4623b",
      "name": "Google Drive Trigger File Created",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "position": [
        -1400,
        1480
      ],
      "typeVersion": 1,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "41A8x3MtmKUsugVg",
          "name": "JVX OAuth2"
        }
      }
    },
    {
      "parameters": {
        "separator": "###SPLIT###"
      },
      "id": "1acda1fb-1800-4c87-9dd1-a1c4447fe6b8",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "position": [
        2220,
        1820
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0144a9a7-6e73-46c4-979f-838ad5c62b89",
              "name": "file_id",
              "type": "string",
              "value": "={{ $json.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "46f69198-b24c-4475-87c1-70c91572769d",
      "name": "Set File ID",
      "type": "n8n-nodes-base.set",
      "position": [
        -880,
        1500
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $('Set File ID').item.json.file_id }}"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "application/pdf"
            }
          }
        }
      },
      "id": "8a2d2e39-3c8c-4d7a-b884-86c21b8caa48",
      "name": "Download FIle",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        -640,
        1500
      ],
      "typeVersion": 3,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "41A8x3MtmKUsugVg",
          "name": "JVX OAuth2"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "e959d5a8-d311-4a29-b400-7c07468a72fe",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $binary.data.mimeType }}",
                    "rightValue": "application/pdf"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "application/pdf"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "d5ae6f2d-e62d-4e08-aa06-629e6dfa7ee8",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $binary.data.mimeType }}",
                    "rightValue": "text/csv"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "text/csv"
            }
          ]
        },
        "options": {}
      },
      "id": "bb0a7039-ea5f-4107-a65c-bfa20d30c442",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "position": [
        -360,
        1500
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"title\": \"Test Title (Replace it with real title\",\n    \"description\":\"Test Description (Replace it with real description)\"\n}"
      },
      "id": "a7b5942d-6077-463b-a969-3f7a8e9100cb",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        860,
        1720
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "id": "78f77e41-73a7-478f-9972-6178f6fd99d7",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        1640,
        1600
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "xyK9CstPcAIDLFiL",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<document> \n{{ $('Document Data').first().json.data }}\n</document> \n\nHere is the chunk we want to situate within the overall document:\n\n<chunk> \n{{ $json.chunk }}\n</chunk> \n\nPlease:\n- Provide a short and succinct **context** to situate this chunk within the document for improved search retrieval.\n- Return the **original chunk** exactly as provided unless a correction is necessary.\n- If the chunk contains an **incomplete number, percentage, or entity**, correct it using the full document.\n- If part of a **sentence is cut off**, reconstruct the missing words only if necessary for clarity.\n- If the chunk is part of a table, include the complete table entry to maintain data integrity\n- Do not add any additional explanations or formatting beyond the required output.\n\nFill in the following format:\n[succinct context] : [original chunk or corrected version if necessary]\n\nYour response should contain only the text that replaces these placeholders, without including the placeholder labels themselves."
      },
      "id": "a4eed1ff-6fa6-40cd-b981-d98a666b8f29",
      "name": "Process Context",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        1480,
        1440
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"data\":  {{ JSON.stringify($json.text) }}\n} ",
        "options": {}
      },
      "id": "c2555cc5-790d-4ac7-aa5b-a140e382c520",
      "name": "Document Data",
      "type": "n8n-nodes-base.set",
      "position": [
        300,
        1440
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunks",
        "options": {
          "destinationFieldName": "chunk"
        }
      },
      "id": "87986cc3-e882-46ba-ad84-09f571dff165",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        1100,
        1440
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "maxItems": 20
      },
      "id": "d49349a6-63ae-472b-9780-c430afc23ebe",
      "name": "Limit",
      "type": "n8n-nodes-base.limit",
      "position": [
        1280,
        1440
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "text",
              "separateBy": "other",
              "customSeparator": "###SPLIT###"
            }
          ]
        },
        "options": {}
      },
      "id": "2462c55b-af9a-473a-92be-7a837e7c0234",
      "name": "Summarize",
      "type": "n8n-nodes-base.summarize",
      "position": [
        1800,
        1440
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "a8006ebd-cb2e-48c1-a876-3776ce0ffabc",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "position": [
        2000,
        1640
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "mode": "list",
          "value": "documents",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "id": "1b67f70d-5df4-4aca-84ce-baca251cab01",
      "name": "Add Data to Supabase Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "position": [
        2000,
        1440
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "id": "59364328-9c40-49ab-8f8d-880f680c137e",
      "name": "Google Gemini Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        660,
        1740
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "xyK9CstPcAIDLFiL",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "content": "## \ud83d\udcc1 Data Processing from Google Drive\nAutomatically monitors your Google Drive folder and processes new files. When you upload a PDF, CSV, or Google Doc, this section downloads the file, extracts all the text content, and prepares it for AI analysis. Think of it as your automatic document reader that never sleeps.",
        "height": 560,
        "width": 1960,
        "color": 4
      },
      "id": "295f52f8-bc5f-444e-8857-2c788af5d608",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1480,
        1300
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## \ud83e\udde0 RAG Data Upload Pipeline\nTakes your extracted document text and makes it AI-ready. It creates smart summaries, breaks documents into digestible chunks, adds context to each piece, and stores everything in a searchable database. This is where your documents become \"AI-searchable\" knowledge that can answer questions.",
        "height": 700,
        "width": 1940,
        "color": 4
      },
      "id": "cabe1cf5-fb67-46dd-8b53-de692dd2aa46",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        540,
        1300
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create metadata title and metadata description based on the document specified below (below ##Document). Metadata title and metadata description will be used to seperate data in vector DB that will be used for RAG.\n\n##Document\n{{ $('Document Data').item.json.data }}",
        "hasOutputParser": true
      },
      "id": "ebeee5e0-817a-4177-8d75-de647b401b7b",
      "name": "Create Metadata Title & Description",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        600,
        1440
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "jsCode": "const chunkSize = 1000;\nconst chunkOverlap = 200;\n//const text = $node[\"ABC\"].json.data.replace(/\\n/, '');\nconst text = $items(\"Document Data\")[0].json.data.replace(/\\n/, '');\n\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n    let splitPoint;\n\n    // Try splitting at paragraph level first\n    splitPoint = remainingText.lastIndexOf(\"\\n\\n\", chunkSize);\n    \n    // If no paragraph split, try splitting at sentence level\n    if (splitPoint === -1) {\n        splitPoint = remainingText.lastIndexOf(\". \", chunkSize);\n    }\n\n    // If no sentence split, try splitting at word level\n    if (splitPoint === -1) {\n        splitPoint = remainingText.lastIndexOf(\" \", chunkSize);\n    }\n\n    // If still no split point, force cut at chunkSize\n    if (splitPoint === -1 || splitPoint < chunkSize * 0.5) {  \n        splitPoint = chunkSize; // Hard split if no good split point\n    }\n\n    // Extract chunk and adjust remaining text with overlap\n    let chunk = remainingText.substring(0, splitPoint).trim();\n    chunks.push(chunk);\n\n    // Move the pointer forward while keeping the overlap\n    remainingText = remainingText.substring(Math.max(0, splitPoint - chunkOverlap)).trim();\n\n    // Break if remaining text is too small to form another chunk\n    if (remainingText.length < chunkSize * 0.2) {\n        chunks.push(remainingText);\n        break;\n    }\n}\n\nreturn { chunks };"
      },
      "id": "97264493-c170-4a63-9e95-9336554f9b24",
      "name": "Split into chunks",
      "type": "n8n-nodes-base.code",
      "position": [
        940,
        1440
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "id": "e16f1e7b-b9ac-48a5-b530-47edddb1727c",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        140,
        860
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "FGduNFSxLzm7OQQE",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Work with your data in Supabase Vector Store",
        "tableName": {
          "__rl": true,
          "mode": "list",
          "value": "documents",
          "cachedResultName": "documents"
        },
        "topK": 20,
        "options": {}
      },
      "id": "6dbadc83-b425-4f1d-92bc-e97c5c32f7b9",
      "name": "Supabase Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "position": [
        520,
        860
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=User Input:\n{{ $json.chatInput }}",
        "options": {
          "systemMessage": "=You're an internal company knowledge assistants. Your job is to answer questions using the files in the Vector Database. Here's how to do it:\n\nCheck Vector Database First\n- Search for similar test chunks using RAG.\n- If you find matches, use them to answer the question. \n- If you find relevant matches and need additional context to support the answer, prioritize retrieving it from documents that share the same metadata \"file_id\" & \"title\" before exploring other sources.\"\n\nNo Answer Found?\n- Clearly say: \"I couldn't find this in the databases\"\n- Never guess or invent answers.\n\nExample Response:\n\"Netflix grew revenue in Streaming services by 20% in 2024.\""
        }
      },
      "id": "692c17bd-f038-4b42-a40c-0d68fed8e231",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        260,
        600
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c4a39601-b632-4d36-b7bf-0e6aba21aa9a",
      "name": "Embeddings OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "position": [
        540,
        1040
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "b42e23ae-4a61-4760-8028-1cd61efbc49e",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        20,
        600
      ],
      "webhookId": "2d4c41cb-c8b7-49c7-a8eb-ebd3dd9ff46d",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "id": "d0bc36e0-23e3-4e87-807d-158d47827e4a",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        320,
        860
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "content": "## AI Chat Agent - Chat with your documents stored in Supabase Vector Store\nour personal AI assistant that can answer questions about all your uploaded documents. Ask anything in plain English - it searches through your document database, finds relevant information, and gives you accurate answers with source references. It remembers your conversation and never makes up information.",
        "height": 760,
        "width": 1180,
        "color": 4
      },
      "id": "01d64c71-cff0-4485-a209-9f8849730baf",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -160,
        480
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## \ud83d\udcc4 AI-Powered RAG Document Processing & Chatbot with Google Drive, Supabase, OpenAI\n\n**What This Workflow Does:**\n- Watches a Google Drive folder for new documents\n- Extracts text from PDF/CSV files\n- Enhances the text using AI (Google Gemini)\n- Chunks and embeds the text using OpenAI\n- Stores vector data in Supabase for semantic search\n- Enables users to chat with documents using OpenAI",
        "height": 320,
        "width": 460,
        "color": 5
      },
      "id": "fdab1e76-f7c1-4cc1-8937-afef39f6eba5",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1340,
        480
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## \ud83d\udccb Data Processing & RAG Workflow\n\n### \ud83d\udcc1 Step 1: Google Drive Trigger  \nWatches a specific Google Drive folder for new file uploads. Triggers every minute.\n\n### \ud83d\udd01 Step 2: Loop Over Uploaded Files  \nEnsures each uploaded file is processed one-by-one to avoid bulk processing issues.\n\n### \ud83c\udd94 Step 3: Set File ID  \nExtracts and stores the Google Drive file ID for reference in later steps.\n\n### \ud83d\udce5 Step 4: Download File  \nDownloads the file (PDF, CSV, or Google Docs). Google Docs are auto-converted to PDF.\n\n### \ud83e\udded Step 5: File Type Switch  \nRoutes file based on type:\n- PDF \u2192 Go to PDF Text Extractor\n- CSV \u2192 Go to CSV Extractor\n\n### \ud83d\udcc4 Step 6A: Extract Text from PDF  \nExtracts raw text content from the PDF file.\n\n### \ud83d\udcca Step 6B: Extract Text from CSV  \nExtracts and formats CSV data into a readable string.\n\n### \ud83d\udce6 Step 7: Format Document Data  \nWraps extracted text into JSON: `{\"data\": \"text content\"}`.\n\n### \ud83e\udde0 Step 8: Generate Metadata (Gemini)  \nUses Gemini AI to create a document title and description.\n\n### \u2702\ufe0f Step 9: Split into Chunks  \nSplits the document text into 1000-character chunks with 200-character overlap, intelligently at paragraph/sentence/word level.\n\n### \ud83d\udd04 Step 10: Split Out Chunks  \nConverts array of chunks into individual workflow items.\n\n### \ud83d\udeab Step 11: Limit to 20 Chunks  \nLimits processing to first 20 chunks to control API and processing load.\n\n### \ud83e\udde0 Step 12: Enhance Chunk Context (Gemini)  \nEach chunk is enhanced for better clarity, continuity, and context using Gemini.\n\n### \ud83e\udde9 Step 13: Summarize  \nCombines enhanced chunks using `###SPLIT###` separator for further processing.\n\n### \ud83e\uddf7 Step 14: Re-Split Enhanced Chunks  \nSplits combined text back into chunks using `###SPLIT###` separator.\n\n### \ud83e\uddec Step 15: Generate Embeddings (OpenAI)  \nConverts text chunks into vector embeddings for semantic search.\n\n### \ud83d\uddc2\ufe0f Step 16: Add Metadata  \nEach chunk is wrapped with metadata (file ID, title, description) for vector DB.\n\n### \ud83e\udde0 Step 17: Store in Supabase Vector DB  \nStores embeddings in Supabase vector store for later semantic retrieval.\n\n",
        "height": 1500,
        "width": 660,
        "color": 5
      },
      "id": "b05296d6-e0d1-4bc3-ab75-525f823cb4cb",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2160,
        1300
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "\n## SETUP REQUIRED  \n**Author:** [Billy Christi](https://n8n.io/creators/billy/)\n\n---\n\n### \ud83d\udcda Database: Supabase Table `documents`\n\nTo manage and store embeddings and metadata, we use a Supabase table with the following schema:\n\n```sql\nCREATE TABLE public.documents (\n  id bigserial PRIMARY KEY,         -- Unique identifier\n  content text,                     -- Textual content of the document\n  metadata jsonb,                   -- Additional metadata (e.g., title, source)\n  embedding vector                  -- Vector embeddings (for similarity search, etc.)\n);\n````\n### \ud83d\udd10 Required Credentials & Keys\n\u2705 **Google Drive Credential** \n\u2705 **Supabase API Key & Project URL** \n\u2705 **OpenAI API Key**\n\u2705 **Google Gemini API Key**\n\n\n",
        "height": 520,
        "width": 1160,
        "color": 5
      },
      "id": "fc91a0e3-09f5-42cb-b18d-472920ac7d24",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -160,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "\n## \ud83e\udd16 CHAT INTERFACE WORKFLOW\n\n### \ud83d\udcac Step 1: Chat Trigger  \nListens for user chat input (e.g., question about a document).\n\n### \ud83e\udde0 Step 2: Simple Memory  \nStores last 10 messages to maintain conversation context.\n\n### \ud83d\udd0d Step 3: Vector Search (Supabase)  \nSearches Supabase vector DB for relevant chunks related to the user's question.\n\n### \ud83e\uddec Step 4: Convert Question to Embedding  \nUses OpenAI to embed the question text for similarity search.\n\n### \ud83d\udde8\ufe0f Step 5: Generate Response (OpenAI GPT-4o-mini)  \nUses context + question to generate a natural language answer.\n\n### \ud83e\udde0 Step 6: AI Agent  \nFinal agent logic:\n- Searches vector DB first\n- Answers based on found chunks\n- Attributes response to correct document\n- Admits if answer not found (no hallucination)",
        "height": 760,
        "width": 660,
        "color": 5
      },
      "id": "99a967bc-4bdc-4a43-bbd8-5b87c9a48143",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -860,
        480
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "\ud83d\udccc **Understanding the Limit Node**\nThe **Limit Node** restricts the number of records or items processed in your workflow. This is especially useful for:\n\u2705 **Testing** your setup with a smaller dataset\n\u2705 **Controlling resource usage** during processing\n\n\ud83d\udca1 **You can**:\n* **Adjust the limit value** to suit your workflow's needs\n* **Remove the Limit Node** altogether to process all available data",
        "height": 300,
        "width": 340,
        "color": 5
      },
      "id": "d74d2e0b-df8a-4ec4-adf5-b55e72e051c3",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1180,
        1580
      ],
      "typeVersion": 1
    }
  ],
  "connections": {
    "Limit": {
      "main": [
        [
          {
            "node": "Process Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract from PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Add Data to Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID": {
      "main": [
        [
          {
            "node": "Download FIle",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Data": {
      "main": [
        [
          {
            "node": "Create Metadata Title & Description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download FIle": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set File ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Context": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from CSV": {
      "main": [
        [
          {
            "node": "Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from PDF": {
      "main": [
        [
          {
            "node": "Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Add Data to Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Split into chunks": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Add Data to Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Process Context",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Create Metadata Title & Description",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Create Metadata Title & Description",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive Trigger File Created": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Metadata Title & Description": {
      "main": [
        [
          {
            "node": "Split into chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "ddc909f2-c226-48af-b5ed-a24325446598",
  "triggerCount": 0,
  "tags": [],
  "shared": [
    {
      "createdAt": "2025-06-30T16:49:51.025Z",
      "updatedAt": "2025-06-30T16:49:51.025Z",
      "role": "workflow:owner",
      "workflowId": "MOjwcSnoQcHENgkl",
      "projectId": "QEiebo2x6YENAnrq",
      "project": {
        "createdAt": "2025-03-12T12:15:21.659Z",
        "updatedAt": "2025-03-15T14:25:50.674Z",
        "id": "QEiebo2x6YENAnrq",
        "name": "Joel Quinn Ebb-Wrightten <n8n.admin@virtualxperiencellc.com>",
        "type": "personal",
        "icon": null,
        "description": null
      }
    }
  ]
}